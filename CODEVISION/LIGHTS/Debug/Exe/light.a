;/*******************************************************
;Date    : 2/6/2021
;Author  :  Mohammad Javad Adel
;*******************************************************/
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;
;eeprom char local [8][2];
;char block;
;
;void select(char tempe);
;void write(char tempee);
;//void defaultpattern(char d);
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;bit rx_buffer_overflow;
;
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0025 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0026 char status,data;
; 0000 0027 status=UCSRA;
;PCODE: $0000000F VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0028 data=UDR;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0029 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 002A    {
; 0000 002B    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 002C #if RX_BUFFER_SIZE == 256
; 0000 002D    // special case for receiver buffer size=256
; 0000 002E    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 002F #else
; 0000 0030    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0031    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0032       {
; 0000 0033       rx_counter=0;
;PCODE: $00000025 VOL: 0
; 0000 0034       rx_buffer_overflow=1;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0035       }
; 0000 0036 #endif
; 0000 0037    }
;PCODE: $00000029 VOL: 0
; 0000 0038 }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 003E {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 003F char data;
; 0000 0040 while (rx_counter==0);
;PCODE: $00000031 VOL: 0
;	data -> R17
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0041 data=rx_buffer[rx_rd_index++];
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0042 #if RX_BUFFER_SIZE != 256
; 0000 0043 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0044 #endif
; 0000 0045 #asm("cli")
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
	cli
;PCODE: $00000042 VOL: 0
; 0000 0046 --rx_counter;
;PCODE: $00000043 VOL: 0
; 0000 0047 #asm("sei")
;PCODE: $00000044 VOL: 0
	sei
;PCODE: $00000045 VOL: 0
; 0000 0048 return data;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0049 }
;PCODE: $00000049 VOL: 0
;#pragma used-
;#endif
;
;void main(void)
; 0000 004E {
;PCODE: $0000004A VOL: 0
; 0000 004F char temp;
; 0000 0050 //int k=0;
; 0000 0051 //for(k=0;k<8;k++){
; 0000 0052 //      local[k][0]=0b01010101;
; 0000 0053 //      local[k][1]=0b10101010;
; 0000 0054 //}
; 0000 0055 //local[2][0]=0b11110000;
; 0000 0056 //local[2][1]=0b00001111;
; 0000 0057 
; 0000 0058 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;	temp -> R17
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0059 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 005A DDRC=(0<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 005B PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 005C DDRD=(1<<DDD7) | (1<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (1<<DDD1) | (0<<DDD0);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 005D PORTD=(0<<PORTD7) | (0<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 005E TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 005F TCNT0=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0060 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0061 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0062 TCNT1H=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0063 TCNT1L=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0064 ICR1H=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0065 ICR1L=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0066 OCR1AH=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0067 OCR1AL=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0068 OCR1BH=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0069 OCR1BL=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 006A ASSR=0<<AS2;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 006B TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 006C TCNT2=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 006D OCR2=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 006E TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<TOIE0);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 006F MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0070 // USART initialization
; 0000 0071 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0072 // USART Receiver: On
; 0000 0073 // USART Transmitter: Off
; 0000 0074 // USART Mode: Asynchronous
; 0000 0075 // USART Baud Rate: 9600
; 0000 0076 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0077 UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0078 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0079 UBRRH=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 007A UBRRL=0x33;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 007B 
; 0000 007C ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 007D SFIOR=(0<<ACME);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 007E ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 007F SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0080 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0081 #asm("sei")
;PCODE: $0000008F VOL: 0
	sei
;PCODE: $00000090 VOL: 0
; 0000 0082 
; 0000 0083 block = PIND & 0x3C;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0084 block = block >> 2 ;
;PCODE: $00000094 VOL: 0
; 0000 0085 //defaultpattern(block);
; 0000 0086 //PORTB=block;
; 0000 0087 
; 0000 0088 while (1)
;PCODE: $00000095 VOL: 0
; 0000 0089       {
; 0000 008A            temp = getchar();
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 008B            if( (0x80 & temp) == 0x80 ){
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 008C                 select(temp);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 008D            }
; 0000 008E            else if ( (0x80 & temp) == 0x00 && (0x0F & temp) == block ){
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 008F                 write(temp);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0090            }
; 0000 0091            else{
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0092             getchar();
;PCODE: $000000AF VOL: 0
; 0000 0093             getchar();
;PCODE: $000000B0 VOL: 0
; 0000 0094            }
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0095       }
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0096 }
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;
;void select(char tempe){
; 0000 0098 void select(char tempe){
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0099 char pattern;
; 0000 009A pattern = 0b01110000;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;	tempe -> Y+1
;	pattern -> R17
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 009B pattern = pattern & tempe;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 009C pattern = pattern >> 4 ;
;PCODE: $000000C1 VOL: 0
; 0000 009D PORTB = local[pattern][0];
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 009E PORTC = local[pattern][1] & 0X3F ;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 009F PORTD = local[pattern][1] & 0XC0 ;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00A0 }
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;
;void write(char tempee){
; 0000 00A2 void write(char tempee){
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00A3 char pattern;
; 0000 00A4 pattern = 0b01110000;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;	tempee -> Y+1
;	pattern -> R17
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00A5 pattern = pattern & tempee;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00A6 pattern = pattern >> 4 ;
;PCODE: $000000E9 VOL: 0
; 0000 00A7 local[pattern][0] = getchar();
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00A8 local[pattern][1] = getchar();
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00A9 PORTB = local[pattern][0];
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00AA PORTC = local[pattern][1] & 0X3F ;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00AB PORTD = local[pattern][1] & 0XC0 ;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00AC }
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;
;//void defaultpattern(char d){
;//int block=0,pattern=0,row=0;
;//int num =0b11011101;
;//for(block=0;block<16;block++){
;//    for(pattern=0;pattern<8;pattern++){
;//        for(row=0;row<2;row++){
;//            if(block==d){
;//                local[pattern][row]= num;
;//                num++;
;//            }
;//        }
;//    }
;//num=0b11011101;
;//}
;//}
